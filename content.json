{"pages":[],"posts":[{"title":"Adoring","text":"123456789#include &lt;iostream&gt;int main(){ std::cout&lt;&lt;&quot;첫번째 정수 입력 : &quot;; std::cin&gt;&gt; inum1; return 0;}","link":"/2021/03/22/Adoring/"},{"title":"R-DAY1","text":"12345# Factor 범주형 변수# 컴퓨터 &lt;- 숫자로 인식# 문자 숫자 논리형 순으로 저장# ordered = TRUE# levels = c(&quot;정렬&quot;) 12345678910111213141516171819202122232425262728# 1. 사람과 관련된 데이터# - 고객 데이터 (CRM)# 2. 기계와 관련된 데이터# - 제조공정과 관련된 데이터# install.packages(&quot;패키지&quot;) 패키지 설치# 1단계 : 패키지 불러오기install.packages(&quot;ggplot2&quot;)library(ggplot2)# 2단계 : 데이터 불러오기data(&quot;iris&quot;)# 3단계 : 데이터 확인str(iris)# 4단계 : 데이터 가공 하기 (시각화)# 5단계 : 시각화ggplot(data = iris, mapping = aes(x = Petal.Length, y = Petal.Width)) + geom_point() + geom_smooth(method=&quot;loess&quot;, se=F) + #xlim(c(0, 0.1)) + #ylim(c(0, 500000)) + labs(subtitle=&quot;Area Vs Population&quot;, y=&quot;Population&quot;, x=&quot;Area&quot;, title=&quot;Scatterplot&quot;, caption = &quot;Source: midwest&quot;)","link":"/2021/03/22/R-DAY1/"},{"title":"R aes","text":"getwd() 위치확인rm(list = ls()) 모두 지우기 12345678910111213141516171819library(ggplot2)ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colours = Species)) + geom_point(size = 5) + theme_bw()ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, size = Petal.Length, colours = Species)) + geom_point() + theme_bw()ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colours = Species)) + geom_point(size = 2) + theme_bw() aes(size = Petal.Lengh, colour = Species)전체 옵션 선택 : aes() 밖에서 = 그래프 종류각각의 데이터별로 옵션을 선택aes(안에서 옵션 설정, 변수명)customize –&gt; scale","link":"/2021/03/23/R-menu/"},{"title":"R test1","text":"패키지 설치 방법 ggplot2와 dplyr 패키지 설치 방법 기재 12install.package(&quot;ggplot2&quot;)install.package(&quot;dplyr&quot;) 패키지 설치 12library(ggplot2)library(dplyr) 라이브러리 연결 액셀 데이터 받아오기12counties &lt;- readxl::read_xlsx(&quot;파일위치/파일이름.xslx&quot;, sheet = 1)glimpse(counties) getwd()로 위치확인 후 진행할 것에 주의glimpse는 현재 데이터를 보여줌 private_work, unemployment를 활용하여 산점도를 작성 region을 기준으로 그룹화 12345ggplot(data = counties, # 데이터 aes(x = private_work, #x축 y = unemployment, #y축 colour = region)) # 색상 = region 4개geom_point() dplyr 함수를 활용하여, 아래 데이터 요약 counties 데이터를 활용합니다. 변수 추출은 region, state, men, women 각 region, state 별 men, wemen 전체 인구수를 구함. 최종 데이터셋 저장 이름은 final_df로 명명 123456789counties %&gt;% select(region, state, county, men, women) %&gt;% # select group_by(region, state) %&gt;% # group_by summarize(total_men = sum(men), #summarize total_women = sum(women)) %&gt;% # head()여기까지 끊는 함수 filter(region == &quot;North Central&quot;) %&gt;% arrange(desc(total_men)) -&gt; final_dfglimpse(final_df) final_df를 기준으로 막대 그래프를 그린다. x축 : state 1개의 region만 선택 12ggplot(final_df, aes(x = state, y = total_men)) +geom_col()","link":"/2021/03/23/R-test1/"},{"title":"Random game 1","text":"가위바위보 1을 입력하면 가위 2를 입력하면 바위 3을 입력하면 보 컴퓨터가 내는 수는 판마다 랜덤(난수) 0을 입력하면 종료 0, 1, 2, 3을 제외한 숫자 입력시 예외처리 게임결과 출력 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;random&gt;using namespace std;string text_temp(int num){ if (num == 1) { return &quot;가위&quot;; } else if (num == 2) { return &quot;바위&quot;; } else { return &quot;보&quot;; }}int main(){ int Count = 1; int player; cout &lt;&lt; &quot;가위바위보&quot; &lt;&lt; endl; random_device rd; mt19937 gen(rd()); uniform_int_distribution&lt;int&gt; dis(1, 3); string com_out; while (1) { int com = dis(gen); cout &lt;&lt; &quot;가위(1)바위(2)보(3)종료(0) : &quot;; cin &gt;&gt; player; Count++; if (player == 0) { cout &lt;&lt; &quot;종료&quot; &lt;&lt; endl; break; } else if (player == com) { cout &lt;&lt; &quot;비겼습니다.&quot; &lt;&lt; endl; cout &lt;&lt; &quot;상대(&quot; &lt;&lt; text_temp(com) &lt;&lt; &quot;) : 플레이어(&quot; &lt;&lt; text_temp(player) &lt;&lt; &quot;)&quot; &lt;&lt; endl; } else if ((player == 1 &amp;&amp; com == 3) || (player == 2 &amp;&amp; com == 1) || (player == 3 &amp;&amp; com == 2)) { cout &lt;&lt; &quot;이겼습니다.&quot; &lt;&lt; endl; cout &lt;&lt; &quot;상대(&quot; &lt;&lt; text_temp(com) &lt;&lt; &quot;) : 플레이어(&quot; &lt;&lt; text_temp(player) &lt;&lt; &quot;)&quot; &lt;&lt; endl; } else if (player &gt; 3) { cout &lt;&lt; &quot;숫자는 1, 2, 3중에서만 입력해주세요.&quot; &lt;&lt; endl; } else { cout &lt;&lt; &quot;졌습니다.&quot; &lt;&lt; endl; cout &lt;&lt; &quot;상대(&quot; &lt;&lt; text_temp(com) &lt;&lt; &quot;) : 플레이어(&quot; &lt;&lt; text_temp(player) &lt;&lt; &quot;)&quot; &lt;&lt; endl; } } return 0;}","link":"/2021/03/23/Random-game-1/"},{"title":"base guide","text":"깃허브에 소스 업로드1git remote 현재 폴더의 원격 레퍼지토리 확인 명령어 1git remote add 원격저장소이름 https://github.com/유저네임/레퍼지토리네임.git 깃허브 저장소의 주소로 원격저장소 생성 작업폴더와 깃허브 저장소가 연동됨. 1git push -u origin master push는 업로드 명령어 수정 후 업데이트123git add 파일명git commit -m &quot;msg&quot;git push commit은 수정한 내용에 대한 코멘터리 소스 내려 받기깃허브 원격 저장소의 Clone or download에서 주소를 복사 복사를 시킬 폴더 생성 IDE로 폴더 오픈 후, 터미널에서 클론 명령어 1git clone https://github.com/유저네임/원격저장소이름.git 내려받아진 폴더로 터미널 이동 1cd 폴더 깃 로그 명령어를 통해 이전 작업내용 확인가능 1git log 이전 반영된 파일 받아오기 1git pull 원격저장소명 브랜치명","link":"/2021/03/23/abase-guide/"},{"title":"git clone","text":"1git clone --depth 1 https://github.com/chinsun9/refactor-2019T1.git commit history 없이 clone 하는 방법–depth 옵션–depth 1 -&gt; 가장 마지막 상태 클론","link":"/2021/03/23/clone/"},{"title":"image upload","text":"#이미지 올리기 1![](../image/r_markdown/pressure-1.png)","link":"/2021/03/23/image-test/"},{"title":"practice","text":"1234a = 1b = 2c = a + bprint(c) 패키지 설치1","link":"/2021/03/22/practice/"},{"title":"temp","text":"R 설치 R을 설치한다. URL: https://www.r-project.org/소스코드 작성 R 소스코드를 작성합니다.1234a &lt;- 1b &lt;- 2c &lt;- a + bprint(c)","link":"/2021/03/22/temp/"},{"title":"R-ggplot No.1","text":"눈금 표시 방법123456ggplot(PlantGrowth, aes(x = group, y = weight)) + geom_boxplot() + scale_y_continuous(limits = c(0, 10), # 축 범위 breaks = c(1, 3, 5, 7, 9), # 축의 숫자 지정 labels = c(&quot;1st&quot;, &quot;three&quot;, &quot;five&quot;, &quot;seven&quot;, &quot;nine&quot;)) 범주형 축 항목 순서 변경하기1234ggplot(PlantGrowth, aes(x = group, weight)) + geom_boxplot() + theme_bw() + scale_x_discrete(limits = c(&quot;trt1&quot;, &quot;ctrl&quot;))","link":"/2021/03/24/R-ggplot/"},{"title":"datacamp","text":"##R 코딩 연습 R 코딩이 어렵다고 생각하여 연습하기 위해 datacamp 링크 저장 https://www.datacamp.com/users/sign_in?redirect=https%3A%2F%2Flearn.datacamp.com%2Fcourses","link":"/2021/03/26/datacamp/"},{"title":"Rshiny setup","text":"R shiny setup setting12345install.packages('rsconnect')library(rsconnect)rsconnect::setAccountInfo(name='kjm94', token='14A30ABF3A5B0831FAF5A8FFB145F970', secret='khn/qL4qNTXeph1BW5ycrB0plemummTXwss47pIA')","link":"/2021/03/25/Rshiny-setup/"},{"title":"twitter API prac","text":"트위터 API 인증 https://apps.twitter.com 회원가입 한 뒤 create an app 클릭 후 진행 rtweet 패키지1234# install.packages(&quot;rtweet&quot;)library(rtweet)library(dplyr)library(ggplot2) search Tweets 함수12rstats &lt;- search_tweets(&quot;#테슬라&quot;, n = 1000, include_rts = FALSE) %&gt;% select(name, location, description) 1glimpse(rtats) api 사용자 토큰이 없어서 결과를 올리지 못함.","link":"/2021/03/26/twitter-API-prac/"},{"title":"","text":"My 1st MarkDown h1 {font-size: 34px;} h1.title {font-size: 38px;} h2 {font-size: 30px;} h3 {font-size: 24px;} h4 {font-size: 18px;} h5 {font-size: 16px;} h6 {font-size: 12px;} code {color: inherit; background-color: rgba(0, 0, 0, 0.04);} pre:not([class]) { background-color: white } code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;} code{white-space: pre;} if (window.hljs) { hljs.configure({languages: []}); hljs.initHighlightingOnLoad(); if (document.readyState && document.readyState === \"complete\") { window.setTimeout(function() { hljs.initHighlighting(); }, 0); } } .main-container { max-width: 940px; margin-left: auto; margin-right: auto; } img { max-width:100%; } .tabbed-pane { padding-top: 12px; } .html-widget { margin-bottom: 20px; } button.code-folding-btn:focus { outline: none; } summary { display: list-item; } pre code { padding: 0; } .tabset-dropdown > .nav-tabs { display: inline-table; max-height: 500px; min-height: 44px; overflow-y: auto; border: 1px solid #ddd; border-radius: 4px; } .tabset-dropdown > .nav-tabs > li.active:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown > .nav-tabs.nav-tabs-open > li.active:before { content: \"\"; border: none; } .tabset-dropdown > .nav-tabs.nav-tabs-open:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown > .nav-tabs > li.active { display: block; } .tabset-dropdown > .nav-tabs > li > a, .tabset-dropdown > .nav-tabs > li > a:focus, .tabset-dropdown > .nav-tabs > li > a:hover { border: none; display: inline-block; border-radius: 4px; background-color: transparent; } .tabset-dropdown > .nav-tabs.nav-tabs-open > li { display: block; float: none; } .tabset-dropdown > .nav-tabs > li { display: none; } My 1st MarkDown R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 Including Plots You can also embed plots, for example: Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot. // add bootstrap table styles to pandoc tables function bootstrapStylePandocTables() { $('tr.odd').parent('tbody').parent('table').addClass('table table-condensed'); } $(document).ready(function () { bootstrapStylePandocTables(); }); $(document).ready(function () { window.buildTabsets(\"TOC\"); }); $(document).ready(function () { $('.tabset-dropdown > .nav-tabs > li').click(function () { $(this).parent().toggleClass('nav-tabs-open'); }); }); (function () { var script = document.createElement(\"script\"); script.type = \"text/javascript\"; script.src = \"https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"; document.getElementsByTagName(\"head\")[0].appendChild(script); })();","link":"/2021/03/26/mark1/"},{"title":"","text":"House prices: Lasso, XGBoost, and a detailed EDA h1 {font-size: 34px;} h1.title {font-size: 38px;} h2 {font-size: 30px;} h3 {font-size: 24px;} h4 {font-size: 18px;} h5 {font-size: 16px;} h6 {font-size: 12px;} code {color: inherit; background-color: rgba(0, 0, 0, 0.04);} pre:not([class]) { background-color: white } code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;} code{white-space: pre;} if (window.hljs) { hljs.configure({languages: []}); hljs.initHighlightingOnLoad(); if (document.readyState && document.readyState === \"complete\") { window.setTimeout(function() { hljs.initHighlighting(); }, 0); } } .main-container { max-width: 940px; margin-left: auto; margin-right: auto; } img { max-width:100%; } .tabbed-pane { padding-top: 12px; } .html-widget { margin-bottom: 20px; } button.code-folding-btn:focus { outline: none; } summary { display: list-item; } pre code { padding: 0; } .tabset-dropdown > .nav-tabs { display: inline-table; max-height: 500px; min-height: 44px; overflow-y: auto; border: 1px solid #ddd; border-radius: 4px; } .tabset-dropdown > .nav-tabs > li.active:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown > .nav-tabs.nav-tabs-open > li.active:before { content: \"\"; border: none; } .tabset-dropdown > .nav-tabs.nav-tabs-open:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown > .nav-tabs > li.active { display: block; } .tabset-dropdown > .nav-tabs > li > a, .tabset-dropdown > .nav-tabs > li > a:focus, .tabset-dropdown > .nav-tabs > li > a:hover { border: none; display: inline-block; border-radius: 4px; background-color: transparent; } .tabset-dropdown > .nav-tabs.nav-tabs-open > li { display: block; float: none; } .tabset-dropdown > .nav-tabs > li { display: none; } House prices: Lasso, XGBoost, and a detailed EDA Kwon jung min 1 Loading and Exploring Data #요약 저는 데이터 세트를 잘 이해하는 데 집중하면서이 대회를 시작했습니다. EDA는 상세하며 많은 시각화가 포함되어 있습니다. 이 버전에는 모델링도 포함됩니다. Lasso 회귀는 교차 검증 RMSE 점수가 0.1121 일 때 가장 잘 수행됩니다. 변수들 사이에 많은 다중 공선 성이 있다는 사실을 감안할 때 이것은 예상되었습니다. Lasso는 예상대로 모델에서 사용 가능한 많은 변수를 선택하지 않습니다. XGBoost 모델은 교차 검증 RMSE가 0.1162로 매우 잘 수행됩니다. *이 두 알고리즘은 매우 다르기 때문에 평균 예측은 예측을 향상시킬 수 있습니다. Lasso 교차 검증 RMSE가 XGBoost의 CV 점수보다 낫기 때문에 Lasso 결과에 두 배의 가중치를 부여하기로 결정했습니다. #Introduction Kaggle은 이 경쟁을 다음과 같이 설명합니다. follows: 주택 구입자에게 꿈의 집을 설명해달라고 요청하면 지하 천장 높이나 동서 철도와의 근접성으로 시작하지 않을 것입니다. 그러나이 놀이터 대회의 데이터 세트는 침실 수나 흰둥이 울타리보다 가격 협상에 훨씬 더 많은 영향을 미친다는 것을 증명합니다. 아이오와 주 에임스에있는 주거용 주택의 거의 모든 측면을 설명하는 79 개의 설명 변수가있는이 경쟁에서는 각 주택의 최종 가격을 예측해야합니다. 1 Loading and Exploring Data ##Loading libraries required and reading the data into R 기본 R 외에 사용되는 R 패키지를로드합니다. # 메세지와 경고를 출력하지 않는다. (반대 : TRUE) library(knitr) # 동적 보고서 생성 엔진 참고 URL : https://en.wikipedia.org/wiki/Knitr library(ggplot2) # 데이터 시각화 패키지 library(plyr) # 데이터 분할, 적용, 조합의 세단계로 데이터를 처리하는 함수 제공 (배열, 데이터 프레임, 리스트) 참고 URL : https://data-make.tistory.com/59 library(dplyr) # 데이터 전처리, 가공 library(corrplot) # 상관행렬과 신뢰구간의 그래프, 행렬의 재정렬 알고리즘 포함 패키지 참고 URL : https://rpubs.com/cardiomoon/27080 library(caret) # 복잡한 회귀와 분류 문제에 대한 모형 훈련과 조절과정을 간소화 하는 함수 참고 URL : http://kocw-n.xcache.kinxcdn.com/data/document/2017/chungbuk/najonghwa/8.pdf library(gridExtra) # 차트 분할 출력 library(scales) # 시각적 맵핑 library(Rmisc) # 데이터 분석 및 유틸리티에 유용한 함수 모음 library(ggrepel) # 레이블 정리 참고 URL : https://kuduz.tistory.com/1111 library(randomForest) # 랜덤으로 만들어 나온 결과를 투표방식으로 예측하는 알고리즘 참고 URL : https://hongsamm.tistory.com/20 library(psych) # 기술통계량을 제공하는 함수 중 하나 참고 URL : https://dr-hkim.github.io/R-301-Descriptive-Statistics/ library(xgboost) # 병렬처리 최적화 패키지 상관행렬 : 확률론과 통계학에서 두 변수간에 어떤 선형적 관계를 갖고 있는 지를 분석하는 방법 신뢰구간 : 표본평균 분포 병렬처리 : 동시에 많은 계산을 하는 연산의 방법 참고URL : https://ko.wikipedia.org/wiki/%EB%B3%91%EB%A0%AC_%EC%BB%B4%ED%93%A8%ED%8C%85 아래에서는 csv를 데이터 프레임으로 R로 읽고 있습니다. train &lt;- read.csv(&quot;train.csv&quot;, stringsAsFactors = F) # 데이터를 R로 불러오지만 메모리에 저장되는 것은 아님 stringsAsFactors : 데이터를 불러올 때, 데이터에 숫자 외의 데이터로 인한 오류 방지 ##데이터 크기 및 구조 train 데이터 세트는 문자 및 정수 변수로 구성됩니다. 대부분의 문자 변수는 실제로 (순서적인) 요인이지만 대부분의 경우 정리 및 / 또는 기능 엔지니어링이 먼저 필요하기 때문에 문자열로 R로 읽기로 선택했습니다. 총 81 개의 열 / 변수가 있으며 마지막 열은 반응 변수 (SalePrice)입니다. 아래에서는 변수를 간략하게 보여주고 있습니다. 그들 모두는 문서 전체에서 더 자세히 논의됩니다. #ID를 제거하지만 테스트 ID를 벡터에 유지합니다. 제출 파일을 작성하는 데 필요합니다. train$Id &lt;- NULL all &lt;- rbind(train) # rbind : 데이터 결합 dim(all) # 데이터프레임 의 길이 관측, 행과 열의 갯수를 출력 ## [1] 1460 80 ID가 없으면 데이터 프레임은 79 개의 예측 변수와 응답 변수 SalePrice로 구성됩니다. #Exploring some of the most important variables ##반응 변수; SalePrice 보시다시피 판매 가격이 올바르게 왜곡되어 있습니다. 이것은 매우 비싼 집을 살 수있는 사람이 거의 없기 때문에 예상되었습니다. 이를 염두에두고 모델링 전에 조치를 취하겠습니다. ggplot(data=all[!is.na(all$SalePrice),], aes(x=SalePrice)) + geom_histogram(fill=&quot;blue&quot;, binwidth = 10000) + scale_x_continuous(breaks= seq(0, 800000, by=100000), labels = comma) binwidth : 연속형 변수를 일정한 구간으로 나누어 빈도수를 구한 후 막대 그래프로 표현 summary(all$SalePrice) # 기술통계 함수 참고 URL : http://blog.naver.com/PostView.nhn?blogId=rickman2&amp;logNo=221451645853&amp;categoryNo=40&amp;parentCategoryNo=0 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 34900 129975 163000 180921 214000 755000 ##가장 중요한 숫자 예측 변수 문자 변수를 사용하려면 작업이 필요합니다. 데이터 세트에 대한 느낌을 얻기 위해 먼저 SalePrice와 높은 상관 관계가있는 숫자 변수를 확인하기로 결정했습니다. ###SalePrice와의 상관 관계 전체적으로 SalePrice와 최소 0.5의 상관 관계가있는 10 개의 숫자 변수가 있습니다. 이러한 모든 상관 관계는 긍정적입니다. numericVars &lt;- which(sapply(all, is.numeric)) #인덱스 벡터 숫자 형 변수 numericVarNames &lt;- names(numericVars) #나중에 사용하기 위해 names 벡터 저장 cat('There are', length(numericVars), 'numeric variables') ## There are 37 numeric variables # which : 특정 값의 위치를 찾는 함수 찾고자 하는 값의 위치를 반환 all_numVar &lt;- all[, numericVars] cor_numVar &lt;- cor(all_numVar, use=&quot;pairwise.complete.obs&quot;) #모든 숫자 변수의 상관 관계 #SalePrice와의 감소하는 상관 관계에 따라 정렬 cor_sorted &lt;- as.matrix(sort(cor_numVar[,'SalePrice'], decreasing = TRUE)) #높은 corelations 만 선택 CorHigh &lt;- names(which(apply(cor_sorted, 1, function(x) abs(x)&gt;0.5))) cor_numVar &lt;- cor_numVar[CorHigh, CorHigh] corrplot.mixed(cor_numVar, tl.col=&quot;black&quot;, tl.pos = &quot;lt&quot;) 이 섹션의 나머지 부분에서는 SalePrice와 SalePrice와 가장 높은 상관 관계를 가진 두 예측 변수 간의 관계를 시각화합니다. 전반적인 품질 및 ’고급’생활 공간 (이것은 지하실에없는 집의 비율입니다. link). 또한 다중 공선 성이 문제라는 것이 분명해집니다. 예를 들어, GarageCars와 GarageArea 간의 상관 관계는 매우 높고 (0.89) 둘 다 SalePrice와 유사한 (높은) 상관 관계를가집니다. SalePrice와의 상관 관계가 0.5보다 높은 나머지 6 개의 변수는 다음과 같습니다.: -TotalBsmtSF: 지하 총 평방 피트 -1stFlrSF: 1 층 평방 피트 -FullBath: 욕실 포함 등급 이상의 방 -TotRmsAbvGrd: 등급 이상의 총 방 (욕실은 포함되지 않음) -YearBuilt: 원래 건설 날짜 -YearRemodAdd: 리모델링 날짜 (개조 또는 추가가없는 경우 건설 날짜와 동일) ###전반적인 품질 전체 품질은 수치 변수 (0.79) 중 SalePrice와 가장 높은 상관 관계를 나타냅니다. 집의 전체 재료와 마감을 1 (매우 나쁨)에서 10 (매우 우수)까지 등급으로 평가합니다. ggplot(data=all[!is.na(all$SalePrice),], aes(x=factor(OverallQual), y=SalePrice))+ geom_boxplot(col='blue') + labs(x='Overall Quality') + scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma) 양의 상관 관계는 확실히 존재하며 약간 상승 곡선 인 것 같습니다. 특이 치에 관해서는 극단적 인 값이 보이지 않습니다. 나중에 이상치로 빼낼 후보가 있으면 4 급 고가 집 인 것 같다. ###지상 (지상) 거실 공간 (평방 피트) SalesPrice와 두 번째로 높은 상관 관계가있는 숫자 변수는 Grade Living Area입니다. 이것은 많은 의미가 있습니다. 큰 집은 일반적으로 더 비쌉니다. ggplot(data=all[!is.na(all$SalePrice),], aes(x=GrLivArea, y=SalePrice))+ geom_point(col='blue') + geom_smooth(method = &quot;lm&quot;, se=FALSE, color=&quot;black&quot;, aes(group=1)) + scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma) + geom_text_repel(aes(label = ifelse(all$GrLivArea[!is.na(all$SalePrice)]&gt;4500, rownames(all), ''))) ## Warning: Use of `all$GrLivArea` is discouraged. Use `GrLivArea` instead. ## Warning: Use of `all$SalePrice` is discouraged. Use `SalePrice` instead. ## `geom_smooth()` using formula 'y ~ x' rownames : 행 이름을 바꾸는 함수 특히 거실이 넓고 SalePrices가 낮은 두 주택은 이상치처럼 보입니다 (주택 524 및 1299, 그래프의 레이블 참조). 이상 값을 가져 오는 것은 위험 할 수 있으므로 아직 제거하지 않겠습니다. 예를 들어, 전반적인 품질에서 낮은 점수는 낮은 가격을 설명 할 수 있습니다. 그러나 아래에서 볼 수 있듯이 이 두 주택은 실제로 전체 품질에서 최대 점수를 얻습니다. 따라서 저는 1299 호와 524 호를 이상 값으로 제거 할 주요 후보로 염두에 두겠습니다. all[c(524, 1299), c('SalePrice', 'GrLivArea', 'OverallQual')] ## SalePrice GrLivArea OverallQual ## 524 184750 4676 10 ## 1299 160000 5642 10 #누락 된 데이터, 레이블 인코딩 및 변수 분해 ##데이터의 완전성 우선, 어떤 변수에 결 측값이 있는지 확인하고 싶습니다. NAcol &lt;- which(colSums(is.na(all)) &gt; 0) sort(colSums(sapply(all[NAcol], is.na)), decreasing = TRUE) ## PoolQC MiscFeature Alley Fence FireplaceQu LotFrontage ## 1453 1406 1369 1179 690 259 ## GarageType GarageYrBlt GarageFinish GarageQual GarageCond BsmtExposure ## 81 81 81 81 81 38 ## BsmtFinType2 BsmtQual BsmtCond BsmtFinType1 MasVnrType MasVnrArea ## 38 37 37 37 8 8 ## Electrical ## 1 sort : 숫자 자체 정렬 decreasing : 내림차순 cat('There are', length(NAcol), 'columns with missing values') ## There are 19 columns with missing values cat : 개행을 하지 않는 출력함수 물론 SalePrice의 1459 NA는 테스트 세트의 크기와 완벽하게 일치합니다. 이는 34 개의 예측 변수에서 NA를 수정해야 함을 의미합니다. ##누락 된 데이터 {.tabset} 대치 이 섹션에서는 결 측값이 포함 된 34 개의 예측 변수를 수정하겠습니다. 나는 그것들을 모두 고칠 때까지 대부분의 NA에서 내려가는 방법을 살펴볼 것입니다. 실제로 다른 변수와 그룹을 형성하는 변수를 우연히 발견하면 그룹으로 다룰 것입니다. 예를 들어, 수영장, 차고 및 지하와 관련된 여러 변수가 있습니다. 문서를 가능한 한 읽기 쉽게 유지하기 위해 knitr에서 제공하는 “Tabs”옵션을 사용하기로 결정했습니다. 각 탭 아래에서 각 변수 (그룹)에 대한 간단한 분석을 찾을 수 있습니다. 모든 섹션을 살펴볼 필요는 없으며 몇 개의 탭만 볼 수도 있습니다. 그렇게한다면, 저는 지하실이나 차고가없는 집을 신중하게 결정했기 때문에 특히 차고와 지하실 섹션이 가치가 있다고 생각합니다. NA가 제거되었는지 확인하는 것 외에도, 명확한 순서가있는 경우 문자 변수를 순서 형 정수로 변환하고 수준이 순서 성이없는 범주 인 경우 요인으로 변환했습니다. 나중에 원-핫 인코딩 (model.matrix 함수 사용)을 사용하여 이러한 요소를 숫자로 변환합니다. ###Pool variables Pool Quality and the PoolArea variable PoolQC는 대부분의 NA가있는 변수입니다. 설명은 다음과 같습니다: PoolQC: Pool quality Ex Excellent Gd Good TA Average/Typical Fa Fair NA No Pool 따라서 NA에 ’No Pool’만 할당하면됩니다. 또한 일반적으로 소수의 주택에만 수영장이 있기 때문에 많은 수의 NA가 의미가 있습니다. all$PoolQC[is.na(all$PoolQC)] &lt;- 'None' 값이 서수이므로 이 변수에 레이블을 인코딩 할 수 있다는 것도 분명합니다. 동일한 품질 수준을 사용하는 여러 변수가 있으므로 나중에 다시 사용할 수있는 벡터를 만들 것입니다. Qualities &lt;- c('None' = 0, 'Po' = 1, 'Fa' = 2, 'TA' = 3, 'Gd' = 4, 'Ex' = 5) 이제 ’revalue’기능을 사용하여 작업을 수행 할 수 있습니다. all$PoolQC&lt;-as.integer(revalue(all$PoolQC, Qualities)) table(all$PoolQC) ## ## 0 2 4 5 ## 1453 2 3 2 revalue : plyr 패키지 안의 라벨 변경 함수 // add bootstrap table styles to pandoc tables function bootstrapStylePandocTables() { $('tr.odd').parent('tbody').parent('table').addClass('table table-condensed'); } $(document).ready(function () { bootstrapStylePandocTables(); }); $(document).ready(function () { window.buildTabsets(\"TOC\"); }); $(document).ready(function () { $('.tabset-dropdown > .nav-tabs > li').click(function () { $(this).parent().toggleClass('nav-tabs-open'); }); }); (function () { var script = document.createElement(\"script\"); script.type = \"text/javascript\"; script.src = \"https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"; document.getElementsByTagName(\"head\")[0].appendChild(script); })();","link":"/2021/03/26/marprac/"}],"tags":[{"name":"C++","slug":"C","link":"/tags/C/"},{"name":"R","slug":"R","link":"/tags/R/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"python","slug":"python","link":"/tags/python/"}],"categories":[]}